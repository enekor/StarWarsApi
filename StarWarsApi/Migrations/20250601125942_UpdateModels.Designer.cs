// <auto-generated />
using System;
using BDCADAO.BDModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StarWarsApi.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20250601125942_UpdateModels")]
    partial class UpdateModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("StarWarsApi.Models.database.Character", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT")
                        .HasColumnName("_id");

                    b.Property<string>("BirthYear")
                        .HasColumnType("TEXT")
                        .HasColumnName("birth_year");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT")
                        .HasColumnName("edited");

                    b.Property<string>("EyeColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("eye_color");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT")
                        .HasColumnName("gender");

                    b.Property<string>("HairColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("hair_color");

                    b.Property<string>("Height")
                        .HasColumnType("TEXT")
                        .HasColumnName("height");

                    b.Property<string>("Homeworld")
                        .HasColumnType("TEXT")
                        .HasColumnName("homeworld");

                    b.Property<string>("Mass")
                        .HasColumnType("TEXT")
                        .HasColumnName("mass");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("SkinColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("skin_color");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("Uid");

                    b.ToTable("characters");
                });

            modelBuilder.Entity("StarWarsApi.Models.database.Films", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT")
                        .HasColumnName("_id");

                    b.Property<string>("Characters")
                        .HasColumnType("TEXT")
                        .HasColumnName("characters");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Director")
                        .HasColumnType("TEXT")
                        .HasColumnName("director");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT")
                        .HasColumnName("edited");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("episode_id");

                    b.Property<string>("OpeningCrawl")
                        .HasColumnType("TEXT")
                        .HasColumnName("opening_crawl");

                    b.Property<string>("Planets")
                        .HasColumnType("TEXT")
                        .HasColumnName("planets");

                    b.Property<string>("Producer")
                        .HasColumnType("TEXT")
                        .HasColumnName("producer");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("release_date");

                    b.Property<string>("Species")
                        .HasColumnType("TEXT")
                        .HasColumnName("species");

                    b.Property<string>("Starships")
                        .HasColumnType("TEXT")
                        .HasColumnName("starships");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.Property<string>("Vehicles")
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicles");

                    b.HasKey("Uid");

                    b.ToTable("films");
                });

            modelBuilder.Entity("StarWarsApi.Models.database.Planet", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT")
                        .HasColumnName("_id");

                    b.Property<string>("Climate")
                        .HasColumnType("TEXT")
                        .HasColumnName("climate");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Diameter")
                        .HasColumnType("TEXT")
                        .HasColumnName("diameter");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT")
                        .HasColumnName("edited");

                    b.Property<string>("Gravity")
                        .HasColumnType("TEXT")
                        .HasColumnName("gravity");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("OrbitalPeriod")
                        .HasColumnType("TEXT")
                        .HasColumnName("orbital_period");

                    b.Property<string>("Population")
                        .HasColumnType("TEXT")
                        .HasColumnName("population");

                    b.Property<string>("RotationPeriod")
                        .HasColumnType("TEXT")
                        .HasColumnName("rotation_period");

                    b.Property<string>("SurfaceWater")
                        .HasColumnType("TEXT")
                        .HasColumnName("surface_water");

                    b.Property<string>("Terrain")
                        .HasColumnType("TEXT")
                        .HasColumnName("terrain");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("Uid");

                    b.ToTable("planets");
                });

            modelBuilder.Entity("StarWarsApi.Models.database.Species", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT")
                        .HasColumnName("_id");

                    b.Property<string>("AverageHeight")
                        .HasColumnType("TEXT")
                        .HasColumnName("average_height");

                    b.Property<string>("AverageLifespan")
                        .HasColumnType("TEXT")
                        .HasColumnName("average_lifespan");

                    b.Property<string>("Classification")
                        .HasColumnType("TEXT")
                        .HasColumnName("classification");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Designation")
                        .HasColumnType("TEXT")
                        .HasColumnName("designation");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT")
                        .HasColumnName("edited");

                    b.Property<string>("Homeworld")
                        .HasColumnType("TEXT")
                        .HasColumnName("homeworld");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("Uid");

                    b.ToTable("species");
                });

            modelBuilder.Entity("StarWarsApi.Models.database.Starship", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT")
                        .HasColumnName("_id");

                    b.Property<string>("CargoCapacity")
                        .HasColumnType("TEXT")
                        .HasColumnName("cargo_capacity");

                    b.Property<string>("Consumables")
                        .HasColumnType("TEXT")
                        .HasColumnName("consumables");

                    b.Property<string>("CostInCredits")
                        .HasColumnType("TEXT")
                        .HasColumnName("cost_in_credits");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Crew")
                        .HasColumnType("TEXT")
                        .HasColumnName("crew");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT")
                        .HasColumnName("edited");

                    b.Property<string>("HyperdriveRating")
                        .HasColumnType("TEXT")
                        .HasColumnName("hyperdrive_rating");

                    b.Property<string>("Length")
                        .HasColumnType("TEXT")
                        .HasColumnName("length");

                    b.Property<string>("MGLT")
                        .HasColumnType("TEXT")
                        .HasColumnName("mglt");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT")
                        .HasColumnName("manufacturer");

                    b.Property<string>("MaxAtmospheringSpeed")
                        .HasColumnType("TEXT")
                        .HasColumnName("max_atmosphering_speed");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Passengers")
                        .HasColumnType("TEXT")
                        .HasColumnName("passengers");

                    b.Property<string>("StarshipClass")
                        .HasColumnType("TEXT")
                        .HasColumnName("starship_class");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("Uid");

                    b.ToTable("starships");
                });

            modelBuilder.Entity("StarWarsApi.Models.database.Vehicle", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT")
                        .HasColumnName("_id");

                    b.Property<string>("CargoCapacity")
                        .HasColumnType("TEXT")
                        .HasColumnName("cargo_capacity");

                    b.Property<string>("Consumables")
                        .HasColumnType("TEXT")
                        .HasColumnName("consumables");

                    b.Property<string>("CostInCredits")
                        .HasColumnType("TEXT")
                        .HasColumnName("cost_in_credits");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Crew")
                        .HasColumnType("TEXT")
                        .HasColumnName("crew");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("TEXT")
                        .HasColumnName("edited");

                    b.Property<string>("Length")
                        .HasColumnType("TEXT")
                        .HasColumnName("length");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT")
                        .HasColumnName("manufacturer");

                    b.Property<string>("MaxAtmospheringSpeed")
                        .HasColumnType("TEXT")
                        .HasColumnName("max_atmosphering_speed");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Passengers")
                        .HasColumnType("TEXT")
                        .HasColumnName("passengers");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.Property<string>("VehicleClass")
                        .HasColumnType("TEXT")
                        .HasColumnName("vehicle_class");

                    b.HasKey("Uid");

                    b.ToTable("vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
